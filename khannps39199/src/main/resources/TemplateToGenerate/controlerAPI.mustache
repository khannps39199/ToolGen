package {{packageName}}.API;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.data.domain.PageRequest;
import {{packageName}}.Entity.*;
import {{packageName}}.Service.*;
import {{packageName}}.DTOS.*;
import {{packageName}}.Mapper.*;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:5173")
public class {{Classname}}API {
	@Autowired
	private {{Classname}}Service {{variableName}}Service;
	
	@Autowired
	private {{Classname}}Mapper {{variableName}}Mapper;

	@GetMapping("/admin/{{Classname}}")
	public ResponseEntity<?> getAll{{Classname}}Api(	
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "5") int size, @RequestParam(defaultValue = "0") Map<String, Object> filters) {
		filters.remove("page");
		filters.remove("size");
		Page<{{Classname}}> pageResult = {{variableName}}Service.{{variableName}}FindAll(page, size, filters);
		List<{{Classname}}DTOS> {{variableName}} = pageResult.getContent().stream().map({{variableName}}Mapper::mapper)
				.collect(Collectors.toList());
		Map<String, Object> response = new HashMap<>();
		response.put("content", {{variableName}});
		response.put("totalPages", pageResult.getTotalPages());
		return ResponseEntity.ok(response);
	}

	@GetMapping("/admin/{{Classname}}/{id}")
	public ResponseEntity<{{Classname}}> get{{Classname}}ByIdApi(@PathVariable int id) {
		//try{
		//}catch(Exception e){
		//}
		
		{{Classname}} {{variableName}} =({{Classname}}){{variableName}}Service.{{variableName}}FindById(id).orElse(new {{Classname}}());
		return ResponseEntity.ok({{variableName}});
	}
	@PostMapping("/admin/{{Classname}}")
	public ResponseEntity<{{Classname}}> addNew{{Classname}}(@RequestBody {{Classname}}DTOS entity) {
	    
	    {{Classname}} saved = {{variableName}}Service.{{variableName}}Save({{variableName}}Mapper.mapperToObject(entity));	    
	    return ResponseEntity.ok(saved);
	}
	@PutMapping("/admin/{{Classname}}/{id}")
	public ResponseEntity<?> update{{Classname}}( @PathVariable int id,@RequestBody {{Classname}}DTOS entity) {
			try {
			{{Classname}}  isExist = {{variableName}}Service.{{variableName}}FindById(id).orElse(null);
			if (isExist != null) {
				{{Classname}}  update = {{variableName}}Mapper.mapperToObject(entity);
				{{variableName}}Service.{{variableName}}Save(update);
				return ResponseEntity.badRequest().body(Map.of("measage", "Update successfuly", "update", update));
			} else {
				return ResponseEntity.badRequest().body(Map.of("measage", "Đã có lỗi xảy ra"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.badRequest().body(Map.of("measage", "Đã có lỗi xảy ra"));
		} 
	}
	@DeleteMapping("/admin/{{Classname}}/{id}")
	public ResponseEntity<Void> delete{{Classname}}(@PathVariable int id) {
	    {{variableName}}Service.{{variableName}}DeleteById(id); 
	    return ResponseEntity.noContent().build(); 
	}


	
}
