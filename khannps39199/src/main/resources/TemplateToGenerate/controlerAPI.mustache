package {{packageName}}.API;

import java.util.List;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.data.domain.PageRequest;
import com.aos.AOSBE.Entity.*;
import com.aos.AOSBE.Service.*;
import com.aos.AOSBE.DTOS.*;
import com.aos.AOSBE.Mapper.*;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/Api/Admin")
@CrossOrigin(origins = "http://localhost:5173")
public class {{Classname}}API {
	@Autowired
	private {{Classname}}Service {{variableName}}Service;
	private {{Classname}}Mapper {{variableName}}Mapper=new {{Classname}}Mapper();

	@GetMapping("/{{Classname}}")
	public ResponseEntity<List<{{Classname}}DTOS>> getAll{{Classname}}Api(	
			@RequestParam(defaultValue = "0") int page,
			@RequestParam(defaultValue = "5") int size) {
			
		List<{{Classname}}DTOS> {{variableName}} = new ArrayList<{{Classname}}DTOS>();
		{{variableName}}Service.{{variableName}}FindAll(page, size).forEach(e -> {
			{{variableName}}.add({{variableName}}Mapper.mapper(e));
		});
		return ResponseEntity.ok({{variableName}});
	}

	@GetMapping("/{{Classname}}/{id}")
	public ResponseEntity<{{Classname}}> get{{Classname}}ByIdApi(@PathVariable int id) {
		{{Classname}} {{variableName}} =({{Classname}}){{variableName}}Service.{{variableName}}FindById(id).orElse(new {{Classname}}());
		return ResponseEntity.ok({{variableName}});
	}
	@PostMapping("/{{Classname}}")
	public ResponseEntity<{{Classname}}> addNew{{Classname}}(@RequestBody {{Classname}}DTOS entity) {
	    
	    {{Classname}} saved = {{variableName}}Service.{{variableName}}Save({{variableName}}Mapper.mapperToObject(entity));	    
	    return ResponseEntity.ok(saved);
	}

	@PutMapping("/{{Classname}}")
	public ResponseEntity<{{Classname}}> update{{Classname}}(@RequestBody {{Classname}} entity) {
	    {{Classname}} updated = {{variableName}}Service.{{variableName}}Save(entity); 
	    return ResponseEntity.ok(updated);
	}
	@DeleteMapping("/{{Classname}}/{id}")
	public ResponseEntity<Void> delete{{Classname}}(@PathVariable int id) {
	    {{variableName}}Service.{{variableName}}DeleteById(id); 
	    return ResponseEntity.noContent().build(); 
	}


	
}
